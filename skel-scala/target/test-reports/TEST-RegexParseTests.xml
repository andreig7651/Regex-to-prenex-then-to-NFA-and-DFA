<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="DESKTOP-F385REB" name="RegexParseTests" tests="32" errors="0" failures="4" skipped="0" time="2.224" timestamp="2024-02-17T19:26:40">
          <properties>
      <property name="java.specification.version" value="17"/><property name="sun.jnu.encoding" value="UTF-8"/><property name="sun.arch.data.model" value="64"/><property name="java.vendor.url" value="Unknown"/><property name="sun.boot.library.path" value="/usr/lib/jvm/java-17-openjdk-amd64/lib"/><property name="sun.java.command" value="/home/andreig7651/.cache/sbt/boot/sbt-launch/1.9.6/sbt-launch-1.9.6.jar test"/><property name="jdk.debug" value="release"/><property name="sun.stderr.encoding" value="UTF-8"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="java.version.date" value="2023-08-24"/><property name="java.home" value="/usr/lib/jvm/java-17-openjdk-amd64"/><property name="file.separator" value="/"/><property name="java.vm.compressedOopsMode" value="32-bit"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="java.specification.name" value="Java Platform API Specification"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="java.runtime.version" value="17.0.8.1+1-Ubuntu-0ubuntu120.04"/><property name="user.name" value="andreig7651"/><property name="log4j.ignoreTCL" value="true"/><property name="file.encoding" value="UTF-8"/><property name="jnidispatch.path" value="/home/andreig7651/.cache/JNA/temp/jna3726281180199549981.tmp"/><property name="jna.loaded" value="true"/><property name="java.io.tmpdir" value="/tmp"/><property name="java.version" value="17.0.8.1"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="native.encoding" value="UTF-8"/><property name="java.library.path" value="/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/><property name="java.vendor" value="Private Build"/><property name="scala.ext.dirs" value="/home/andreig7651/.sbt/1.0/java9-rt-ext-private_build_17_0_8_1"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="java.class.path" value="/home/andreig7651/.cache/sbt/boot/sbt-launch/1.9.6/sbt-launch-1.9.6.jar"/><property name="java.vm.vendor" value="Private Build"/><property name="jline.shutdownhook" value="false"/><property name="user.timezone" value="Europe/Bucharest"/><property name="java.vm.specification.version" value="17"/><property name="os.name" value="Linux"/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.cpu.endian" value="little"/><property name="user.home" value="/home/andreig7651"/><property name="user.language" value="en"/><property name="sbt.script" value="/usr/bin/sbt"/><property name="sbt.ipcsocket.tmpdir" value="/mnt/wslg/runtime-dir/.sbt/ipcsocket"/><property name="swoval.tmpdir" value="/mnt/wslg/runtime-dir/.sbt/swoval"/><property name="jline.esc.timeout" value="0"/><property name="path.separator" value=":"/><property name="os.version" value="5.15.133.1-microsoft-standard-WSL2"/><property name="jna.nosys" value="true"/><property name="java.runtime.name" value="OpenJDK Runtime Environment"/><property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/><property name="jna.platform.library.path" value="/usr/lib/x86_64-linux-gnu:/lib/x86_64-linux-gnu:/usr/lib64:/lib64:/usr/lib:/lib:/libx32:/lib32:/usr/lib/wsl/lib:/usr/lib/x86_64-linux-gnu/libfakeroot"/><property name="java.vendor.url.bug" value="Unknown"/><property name="user.dir" value="/mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala"/><property name="os.arch" value="amd64"/><property name="java.vm.info" value="mixed mode, sharing"/><property name="java.vm.version" value="17.0.8.1+1-Ubuntu-0ubuntu120.04"/><property name="java.class.version" value="61.0"/>
    </properties>
          <testcase classname="RegexParseTests" name="single char (1p)" time="0.122">
                      
                    </testcase><testcase classname="RegexParseTests" name="single concat (1p)" time="0.006">
                      
                    </testcase><testcase classname="RegexParseTests" name="single union (1p)" time="0.012">
                      
                    </testcase><testcase classname="RegexParseTests" name="single star (1p)" time="0.004">
                      
                    </testcase><testcase classname="RegexParseTests" name="union concat 1 (2p)" time="0.026">
                      
                    </testcase><testcase classname="RegexParseTests" name="union concat 2 (2p)" time="0.008">
                      
                    </testcase><testcase classname="RegexParseTests" name="multiple union (3p)" time="0.016">
                      
                    </testcase><testcase classname="RegexParseTests" name="union concat with par 1 (3p)" time="0.005">
                      
                    </testcase><testcase classname="RegexParseTests" name="union concat with par 2 (3p)" time="0.003">
                      
                    </testcase><testcase classname="RegexParseTests" name="union star (2p)" time="0.005">
                      
                    </testcase><testcase classname="RegexParseTests" name="concat star (3p)" time="0.008">
                      
                    </testcase><testcase classname="RegexParseTests" name="complex union concat (6p)" time="0.007">
                      
                    </testcase><testcase classname="RegexParseTests" name="all basic 1 (6p)" time="0.005">
                      
                    </testcase><testcase classname="RegexParseTests" name="all basic 2 (6p)" time="0.008">
                      
                    </testcase><testcase classname="RegexParseTests" name="all basic 3 (6p)" time="0.005">
                      
                    </testcase><testcase classname="RegexParseTests" name="all basic 4 (6p)" time="0.005">
                      
                    </testcase><testcase classname="RegexParseTests" name="all basic 5 (6p)" time="0.005">
                      
                    </testcase><testcase classname="RegexParseTests" name="all basic 6 (6p)" time="0.007">
                      
                    </testcase><testcase classname="RegexParseTests" name="all basic 7 (6p)" time="0.013">
                      
                    </testcase><testcase classname="RegexParseTests" name="eps (1p)" time="0.001">
                      
                    </testcase><testcase classname="RegexParseTests" name="escaped chars 1 (1p)" time="0.028">
                      <failure message="/mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:217 assertion failed
216:    assert(Dfa.fromPrenex(s).accepts(&quot; a&quot;))
[7m217:    assert(!Dfa.fromPrenex(s).accepts(&quot;@a&quot;))[0m
218:  }" type="munit.FailException">munit.FailException: /mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:217 assertion failed
216:    assert(Dfa.fromPrenex(s).accepts(&quot; a&quot;))
[7m217:    assert(!Dfa.fromPrenex(s).accepts(&quot;@a&quot;))[0m
218:  }
	at munit.FunSuite.assert(FunSuite.scala:11)
	at RegexParseTests.$anonfun$new$203(RegexParseTests.scala:217)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
</failure>
                    </testcase><testcase classname="RegexParseTests" name="escaped chars 2 (1p)" time="0.001">
                      <failure message="/mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:224 assertion failed
223:    val s = Regex.toPrenex(str)
[7m224:    assert(Dfa.fromPrenex(s).accepts(&quot;\na\tb&quot;))[0m
225:  }" type="munit.FailException">munit.FailException: /mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:224 assertion failed
223:    val s = Regex.toPrenex(str)
[7m224:    assert(Dfa.fromPrenex(s).accepts(&quot;\na\tb&quot;))[0m
225:  }
	at munit.FunSuite.assert(FunSuite.scala:11)
	at RegexParseTests.$anonfun$new$208(RegexParseTests.scala:224)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
</failure>
                    </testcase><testcase classname="RegexParseTests" name="0 to 9 (2p)" time="0.024">
                      
                    </testcase><testcase classname="RegexParseTests" name="a to z (2p)" time="0.02">
                      
                    </testcase><testcase classname="RegexParseTests" name="A to Z (2p)" time="0.025">
                      
                    </testcase><testcase classname="RegexParseTests" name="plus (1p)" time="0.003">
                      
                    </testcase><testcase classname="RegexParseTests" name="question mark (1p)" time="0.001">
                      
                    </testcase><testcase classname="RegexParseTests" name="q and p (1p)" time="0.003">
                      
                    </testcase><testcase classname="RegexParseTests" name="0 to 9 star (3p)" time="0.03">
                      
                    </testcase><testcase classname="RegexParseTests" name="squared ops (3p)" time="1.806">
                      
                    </testcase><testcase classname="RegexParseTests" name="complex (6p)" time="0.001">
                      <failure message="/mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:305 assertion failed
304:    val s = Regex.toPrenex(str)
[7m305:    assert(Dfa.fromPrenex(s).accepts(&quot;0&quot;))[0m
306:    assert(Dfa.fromPrenex(s).accepts(&quot;1231212&quot;))" type="munit.FailException">munit.FailException: /mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:305 assertion failed
304:    val s = Regex.toPrenex(str)
[7m305:    assert(Dfa.fromPrenex(s).accepts(&quot;0&quot;))[0m
306:    assert(Dfa.fromPrenex(s).accepts(&quot;1231212&quot;))
	at munit.FunSuite.assert(FunSuite.scala:11)
	at RegexParseTests.$anonfun$new$271(RegexParseTests.scala:305)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
</failure>
                    </testcase><testcase classname="RegexParseTests" name="all (6p)" time="0.011">
                      <failure message="/mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:316 assertion failed
315:    val s = Regex.toPrenex(str)
[7m316:    assert(Dfa.fromPrenex(s).accepts(&quot;bdda &quot;))[0m
317:    assert(Dfa.fromPrenex(s).accepts(&quot;28121274849cdda&quot;))" type="munit.FailException">munit.FailException: /mnt/d/Anul 3/Semestrul 1/Limbaje formale si automate/skel-scala-e2/skel-scala/src/test/scala/RegexParseTests.scala:316 assertion failed
315:    val s = Regex.toPrenex(str)
[7m316:    assert(Dfa.fromPrenex(s).accepts(&quot;bdda &quot;))[0m
317:    assert(Dfa.fromPrenex(s).accepts(&quot;28121274849cdda&quot;))
	at munit.FunSuite.assert(FunSuite.scala:11)
	at RegexParseTests.$anonfun$new$282(RegexParseTests.scala:316)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.scala:18)
</failure>
                    </testcase>
          <system-out><![CDATA[]]></system-out>
          <system-err><![CDATA[]]></system-err>
        </testsuite>